>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Check instantiation
>>> bg = BaseGeometry()
>>> isinstance(bg, BaseGeometry)
True

# Check area()
>>> try:
...     bg.area()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented

# Check successful validations
>>> bg.integer_validator("myint", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("age", 1)

# Fail: non-integer (string)
>>> try:
...     bg.integer_validator("age", "4")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Fail: non-integer (tuple)
>>> try:
...     bg.integer_validator("age", (4,))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Fail: non-integer (list)
>>> try:
...     bg.integer_validator("age", [3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Fail: non-integer (bool)
>>> try:
...     bg.integer_validator("age", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Fail: non-integer (set)
>>> try:
...     bg.integer_validator("age", {3, 4})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Fail: non-integer (None)
>>> try:
...     bg.integer_validator("age", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Fail: float
>>> try:
...     bg.integer_validator("age", 13.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Fail: zero
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# Fail: negative
>>> try:
...     bg.integer_validator("age", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# Confirm attributes
>>> print(dir(bg))  # doctest: +ELLIPSIS
[...]
